# frozen_string_literal: true

desc 'Generate the complete all/Dangerfile'
task 'generate:all' do
  contents = [
    header,
    lib_files_content
  ]

  danger_files.each do |file|
    contents << inlined_content(file)
  end

  write_content('rules/all/Dangerfile', contents)
end

desc 'Generate every single */**/Dangerfile'
task 'generate:single' do
  contents = [
    header,
    lib_files_content
  ]

  files('src/*/**/Dangerfile').each do |file|
    contents << inlined_content(file)
    output_file = file.gsub(%r{^src/}, 'rules/')
    write_content(output_file, contents)
  end
end

desc 'Generate all Dangerfiles'
task generate: %i[generate:all generate:single]

REQUIRE_PATTERN = /^require ["'].+?["']$/
FROZEN_STRING = '# frozen_string_literal: true'

def files(*patterns)
  Dir[*patterns].sort
end

def danger_files
  files('src/*/**/Dangerfile')
end

def lib_files
  files('lib/*.rb')
end

def read_content(file)
  File.open(file, 'r:UTF-8', &:read)
end

def write_content(file, contents)
  directory = File.dirname(file)
  FileUtils.mkdir_p(directory)

  File.write(file, "#{contents.join.strip}\n")
end

def clean_content(content)
  content
    .gsub(FROZEN_STRING, '')
    .gsub(REQUIRE_PATTERN, '')
    .gsub(/\n\n+/, '')
end

def header
  <<~HEADER
    #{FROZEN_STRING}

    # THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
    # RUN `rake generate` TO REGENERATE.

  HEADER
end

def included_file_header(file, content)
  "# --> #{file}:\n#{content}\n"
end

def inlined_content(file)
  content = read_content(file)

  content = clean_content(content)

  included_file_header(file, content)
end

def lib_files_content
  lib_files.map { |file| inlined_content(file) }
end
